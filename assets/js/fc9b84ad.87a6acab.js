"use strict";(self.webpackChunkdocs_rancherdesktop_io=self.webpackChunkdocs_rancherdesktop_io||[]).push([[739],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return s}});var l=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,o=function(e,t){if(null==e)return{};var n,l,o={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=l.createContext({}),p=function(e){var t=l.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return l.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),s=o,k=m["".concat(d,".").concat(s)]||m[s]||u[s]||r;return n?l.createElement(k,a(a({ref:t},c),{},{components:n})):l.createElement(k,a({ref:t},c))}));function s(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<r;p++)a[p]=n[p];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},63198:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return a},default:function(){return k},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return p}});var l=n(83117),o=(n(67294),n(3905));const r={title:"Hello World Example"},a=void 0,i={unversionedId:"how-to-guides/hello-world-example",id:"version-latest/how-to-guides/hello-world-example",title:"Hello World Example",description:"This tutorial will demonstrate how to get started with Rancher Desktop by pushing an app to a local Kubernetes cluster.",source:"@site/versioned_docs/version-latest/how-to-guides/hello-world-example.md",sourceDirName:"how-to-guides",slug:"/how-to-guides/hello-world-example",permalink:"/how-to-guides/hello-world-example",draft:!1,editUrl:"https://github.com/rancher-sandbox/docs.rancherdesktop.io/edit/main/versioned_docs/version-latest/how-to-guides/hello-world-example.md",tags:[],version:"latest",frontMatter:{title:"Hello World Example"},sidebar:"tutorialSidebar",previous:{title:"Working with Containers",permalink:"/tutorials/working-with-containers"},next:{title:"Installing and Uninstalling Rancher Desktop Extensions",permalink:"/how-to-guides/installing-uninstalling-extensions"}},d={},p=[{value:"Example#1 - Build Image &amp; Run Container",id:"example1---build-image--run-container",level:3},{value:"Create a folder",id:"create-a-folder",level:4},{value:"Create a blank Dockerfile",id:"create-a-blank-dockerfile",level:4},{value:"Populate the Dockerfile with the command below",id:"populate-the-dockerfile-with-the-command-below",level:4},{value:"Build and run the image for verification purposes",id:"build-and-run-the-image-for-verification-purposes",level:4},{value:"Example#2 - Build Image &amp; Deploy Container to Kubernetes",id:"example2---build-image--deploy-container-to-kubernetes",level:3},{value:"Create a folder and add a sample index.html file as follows",id:"create-a-folder-and-add-a-sample-indexhtml-file-as-follows",level:4},{value:"Create a blank Dockerfile",id:"create-a-blank-dockerfile-1",level:4},{value:"Populate the Dockerfile with the command below",id:"populate-the-dockerfile-with-the-command-below-1",level:4},{value:"Build image from code locally",id:"build-image-from-code-locally",level:4},{value:"Deploy to Kubernetes",id:"deploy-to-kubernetes",level:4},{value:"Delete the pod and the image",id:"delete-the-pod-and-the-image",level:4}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=c("Tabs"),m=c("TabItem"),s={toc:p};function k(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,l.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("head",null,(0,o.kt)("link",{rel:"canonical",href:"https://docs.rancherdesktop.io/how-to-guides/hello-world-example"})),(0,o.kt)("p",null,"This tutorial will demonstrate how to get started with Rancher Desktop by pushing an app to a local Kubernetes cluster."),(0,o.kt)("p",null,"Rancher Desktop works with two container engines, ",(0,o.kt)("a",{parentName:"p",href:"https://containerd.io/"},"containerd")," and ",(0,o.kt)("a",{parentName:"p",href:"https://mobyproject.org/"},"Moby"),", the open-sourced components of the Docker ecosystem. For ",(0,o.kt)("inlineCode",{parentName:"p"},"nerdctl"),", use the ",(0,o.kt)("strong",{parentName:"p"},"containerd")," runtime. For ",(0,o.kt)("inlineCode",{parentName:"p"},"docker"),", use the ",(0,o.kt)("strong",{parentName:"p"},"dockerd(moby)")," runtime."),(0,o.kt)("h3",{id:"example1---build-image--run-container"},"Example#1 - Build Image & Run Container"),(0,o.kt)("h4",{id:"create-a-folder"},"Create a folder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir hello-world\ncd hello-world\n")),(0,o.kt)("h4",{id:"create-a-blank-dockerfile"},"Create a blank Dockerfile"),(0,o.kt)("p",null,"On Windows, Create a blank file named ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")),(0,o.kt)("p",null,"On Linux, You can use below command to create a blank ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"vi Dockerfile\n")),(0,o.kt)("h4",{id:"populate-the-dockerfile-with-the-command-below"},"Populate the Dockerfile with the command below"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'FROM alpine  \nCMD ["echo", "Hello World!!"]\n')),(0,o.kt)("h4",{id:"build-and-run-the-image-for-verification-purposes"},"Build and run the image for verification purposes"),(0,o.kt)(u,{groupId:"container-runtime",mdxType:"Tabs"},(0,o.kt)(m,{value:"nerdctl",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nerdctl build --tag helloworld:v1.0 .\nnerdctl images | grep helloworld\nnerdctl run --rm helloworld:v1.0\n# Remove the image\nnerdctl rmi helloworld:v1.0 \n"))),(0,o.kt)(m,{value:"docker",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker build --tag helloworld:v1.0 .\ndocker images | grep helloworld\ndocker run --rm helloworld:v1.0\n# Remove the image\ndocker rmi helloworld:v1.0 \n")))),(0,o.kt)("h3",{id:"example2---build-image--deploy-container-to-kubernetes"},"Example#2 - Build Image & Deploy Container to Kubernetes"),(0,o.kt)("p",null,"Make sure that you switch the ",(0,o.kt)("strong",{parentName:"p"},"Container Runtime")," setting in the ",(0,o.kt)("strong",{parentName:"p"},"Kubernetes Settings")," panel to either ",(0,o.kt)("inlineCode",{parentName:"p"},"dockerd")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"containerd")," as needed."),(0,o.kt)("h4",{id:"create-a-folder-and-add-a-sample-indexhtml-file-as-follows"},"Create a folder and add a sample index.html file as follows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mkdir nginx\ncd nginx\necho "<h1>Hello World from NGINX!!</h1>" > index.html\n')),(0,o.kt)("h4",{id:"create-a-blank-dockerfile-1"},"Create a blank Dockerfile"),(0,o.kt)("p",null,"On Windows, Create a blank file named ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")),(0,o.kt)("p",null,"On Linux, You can use below command to create a blank ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"vi Dockerfile\n")),(0,o.kt)("h4",{id:"populate-the-dockerfile-with-the-command-below-1"},"Populate the Dockerfile with the command below"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"FROM nginx:alpine\nCOPY . /usr/share/nginx/html\n")),(0,o.kt)("h4",{id:"build-image-from-code-locally"},"Build image from code locally"),(0,o.kt)("p",null,"\u26a0\ufe0f ",(0,o.kt)("strong",{parentName:"p"},"Note:")," Please note that you need to pass the flag ",(0,o.kt)("inlineCode",{parentName:"p"},"--namespace k8s.io")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"nerdctl")," build command, so that ",(0,o.kt)("inlineCode",{parentName:"p"},"nerdctl")," builds the image and then makes it available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"k8s.io")," namespace."),(0,o.kt)(u,{groupId:"container-runtime",mdxType:"Tabs"},(0,o.kt)(m,{value:"nerdctl",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nerdctl --namespace k8s.io build --tag nginx-helloworld:latest .\nnerdctl --namespace k8s.io images | grep nginx-helloworld\n"))),(0,o.kt)(m,{value:"docker",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker build --tag nginx-helloworld:latest .\ndocker images | grep nginx-helloworld\n")))),(0,o.kt)("h4",{id:"deploy-to-kubernetes"},"Deploy to Kubernetes"),(0,o.kt)("p",null,"Run below command to create and run a pod using the image built in the previous step. "),(0,o.kt)("p",null,"\u26a0\ufe0f ",(0,o.kt)("strong",{parentName:"p"},"Note:")," Please note that you need to pass the flag ",(0,o.kt)("inlineCode",{parentName:"p"},"--image-pull-policy=Never")," to use a local image with ",(0,o.kt)("inlineCode",{parentName:"p"},":latest")," tag, as ",(0,o.kt)("inlineCode",{parentName:"p"},":latest")," tag will always try to pull the images from a remote repository."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl run hello-world --image=nginx-helloworld:latest --image-pull-policy=Never --port=80\nkubectl port-forward pods/hello-world 8080:80\n")),(0,o.kt)("p",null,"Point your web browser to ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost:8080"),", and you will see the message ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello World from NGINX!!"),". If you prefer to stay on the command line, use ",(0,o.kt)("inlineCode",{parentName:"p"},"curl localhost:8080"),"."),(0,o.kt)("h4",{id:"delete-the-pod-and-the-image"},"Delete the pod and the image"),(0,o.kt)(u,{groupId:"container-runtime",mdxType:"Tabs"},(0,o.kt)(m,{value:"nerdctl",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl delete pod hello-world\n# Remove the image\nnerdctl --namespace k8s.io rmi nginx-helloworld:latest \n"))),(0,o.kt)(m,{value:"docker",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl delete pod hello-world \n# Remove the image\ndocker rmi nginx-helloworld:latest\n")))))}k.isMDXComponent=!0}}]);